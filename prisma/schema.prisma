datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  canvases      Canvas[]
  folders       Folder[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum isPublic {
  public
  private
}

model Canvas {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  lastModified DateTime @updatedAt
  name         String   @db.VarChar(300)
  isPublic     isPublic @default(private) // Use enum type correctly
  data         Json

  UserId String
  user   User   @relation(fields: [UserId], references: [id])

  FolderId String?
  folder   Folder? @relation(fields: [FolderId], references: [id])

  @@map("canvases")
}

model Folder {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  lastModified DateTime @updatedAt
  name         String   @db.VarChar(300)
  isPublic     isPublic @default(private)
  canvases     Canvas[]

  parentId     String?
  parentFolder Folder? @relation("FolderHierarchy", fields: [parentId], references: [id])

  subFolders Folder[] @relation("FolderHierarchy")

  UserId String
  user   User   @relation(fields: [UserId], references: [id])

  @@map("folders")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
